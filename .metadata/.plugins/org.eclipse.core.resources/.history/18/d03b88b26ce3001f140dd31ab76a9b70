/**
 * Auteurs : Paul ADENOT & Étienne Brodu.
 * Ce fichier fournit la suite de test pour le pilote
 * implémenté dans le fichier driver.c
 */

#include "driver.h"
#include <errnoLib.h>
#include <stdio.h>

/* Écrit un message d'erreur sur la sortie d'erreur */
#define ERR_MSG(x) printf("Test %d failed. errno : %d\n",(x), errnoGet());

/**
 * Test 1 – Installation d’un driver
 * Description
 * Installer le driver alors qu’il n’est pas installé
 * Resultat attendu
 * La valeur de retour doit être positive, et correspond au numéro du driver. Il doit être possible
 * de le retrouver en utilisant la fonction iosDrvShow.
 **/
int test_1()
{
	int success = 0;
	if(pe_driverInstall(10))
	{
		success++;
	}
	else
	{
		ERR_MSG(1);
	}
	iosDrvShow();
	getchar();
	// Call this to clean the system.
	pe_driverUninstall();
	return success;
}

 /**
 * Test 2 – Installation d’un driver déjà installé
 * Description
 * Installer le driver alors qu’il est déjà installé : appeler deux fois iosDrvInstall.
 * Resultat attendu
 * La première installation doit bien se passer (valeur de retour positive). Le second appel de
 * iosDrvInstall doit renvoyer ERROR.
 **/
int test_2()
{
	int success = 0;
	if(pe_driverInstall(10))
	{
		if( pe_driverInstall(10) == -1)
		{
			success++;
		}
		else
		{
			ERR_MSG(2)
		}
	}
	else
	{
		ERR_MSG(2)
	}
	
	printf("67");
	
	// Call this to clean the system.
	pe_driverUninstall();
	return success;
}
 /**
 * Test 3 – Retrait d’un driver
 * Description
 * Utilisation de la fonction iosDrvRemove, alors que le pilote est installé sur le système, et qu’il
 * n’est pas utilisé.
 * Resultat attendu
 * La valeur de retour doit être égale à OK.
 **/
int test_3()
{
	int success = 0;
	pe_driverInstall(10);
	if(pe_driverUninstall() == OK)
	{
		success++;
	}
	else
	{
		ERR_MSG(3);
	}
	return success;
}
 /**
 * Test 4 – Retrait du driver alors qu’il n’est pas installé
 * Description
 * Utilisation de la fonction iosDrvRemove, alors que le pilote n’est pas installé sur le système.
 * Resultat attendu
 * La valeur de retour doit être ERROR.
 **/
int test_4()
{
	int success = 0;
	if(pe_driverUninstall() == ERROR)
	{
		success++;
	}
	else
	{
		ERR_MSG(4)
	}
	
	return success;
}

/**
 * Test 5 – Retrait du driver alors qu’un périphérique est ouvert
 * Description
 * Alors qu’un capteur a été ouvert en lecture, retirer le driver, à l’aide de la fonction iosDrvRemove.
 * Resultat attendu
 * La fonction doit retourner ERROR, et errno doit être positionné à ECPTBUSY. Le driver ne doit
 * pas être retiré.
 */
int test_5()
{
	int success = 0;
	int fd = 0;

	pe_driverInstall(10);
	
	// Ouvertude d'un capteur.
	fd = open("/dev/capteur0", O_RDONLY);
	if( ! fd)
	{
		printf("Erreur d'ouverture du periphérique : test_5\n");
		return success;
	}
	
	// Tentative de retrait du driver : cela doit être un échec.
	if( pe_driverUninstall() == ERROR )
	{
		if(errnoGet() == ECPTBUSY)
			success++;
		else
			printf("Pas le bon code errno : test_5\n");
	}
	return success;
}
/**
 * Test 6 – Ajout d’un périphérique
 * Description
 * Utilisation de la fonction iosDevAdd, une seule fois, avec des paramètre valides.
 * Resultat attendu
 * La valeur de retour doit être OK, le périphérique doit être trouvable en utilisant iosDevFind, qui
 * ne doit pas renvoyer NULL.
 **/
int test_6()
{
	return 0;
}
/**
 * Test 7 – Retrait d’un périphérique
 * Description
 * Utilisation de la fonction iosDevDelete, avec des paramètres valides.
 * Resultat attendu
 * Il ne doit plus être possible d’ouvrir le périphérique : un appel à open sur ce périphérique doit
 * échouer (il doit retourner ERROR), et errno doit être positionné à ENEXIST.
 **/
int test_7()
{
	return 0;
}
/**
 * Test 8 – Ajout d’un périphérique alors que 15 périphériques ont été ajoutés.
 * Description
 * Utilisation de la fonction iosDevAdd, 16 fois, avec des paramètres valides.
 * Resultat attendu
 * Le 16e appel à iosDevAdd doit provoquer une erreur, et renvoyer ERROR.
 **/
int test_8()
{
	return 0;	
}
/**
 * Test 9 – Ouverture d’un capteur
 * Description
 * Appeler open sur un capteur valide (le fichier existe et est accessible en écriture), avec des options
 * valide (O_RDONLY), une seule fois.
 * Resultat attendu
 * La valeur de retour doit être un entier positif.
 **/
int test_9()
{
	return 0;	
}
/**
 * Test 10 – Ouverture d’un capteur déjà ouvert
 * Description
 * Appeler open sur un capteur valide (le fichier existe, et est accessible en lecture), alors qu’il vient
 * d’être ouvert avec succès.
 * Resultat attendu
 * open doit renvoyer ERROR, et errno doit être positionné à EALREADYOPENED.
 **/
int test_10()
{
	return 0;	
}
/**
 * Test 11 – Ouverture d’un capteur avec des paramètres invalides
 * Description
 * Appeler open sur un capteur valide (le fichier existe, et est accessible en lecture/écriture, en
 * passant un mode différent de O_RDONLY.
 * Resultat attendu
 * .
 * L’appel doit échouer, et donc renvoyer ERROR. De plus, errno doit être positionné à EARG.
 **/
int test_11()
{
	return 0;	
}
/**
 * Test 12 – Fermeture d’un capteur
 * Description
 * Appeler close sur un descripteur de fichier valide (qui a été ouvert avec succès précédemment),
 * et qui n’a pas été fermé depuis.
 * Resultat attendu
 * La valeur de retour doit être égale à OK
 **/
int test_12()
{
	return 0;	
}
/**
 * Test 13 – Lecture d’une valeur dans un capteur
 * Description
 * Utiliser read sur un capteur ouvert avec succès
 * Resultat attendu
 * La valeur de retour doit être un nombre positif, et doit être cohérente par rapport aux paramètre
 * d’appel de read.
 **/
int test_13()
{
	return 0;	
}
/**
 * Test 14 – Utilisation de read avec une taille de lecture invalide
 * Description
 * Utilisation de l’appel système read avec une descripteur de fichier valide, mais avec une taille
 * de lecture négative.
 * Resultat attendu
 * L’appel doit échouer en renvoyant -1, et errno doit être positionné à EARG.
 **/
int test_14()
{
	return 0;	
}
/**
 * Test 15 – Utilisation de ioctl avec des paramètres corrects
 * Description
 * Utilisation de ioctl avec des paramètres corrects : un descripteur de fichier valide, une valeur
 * pour request égale à la constante CHANGEMENT_CAPTEUR, et une valeur pour value inférieur ou
 * égale à 255, correspondant bien à un capteur valide.
 * Resultat attendu
 * La valeur de retour doit être égale à OK, ou alors elle doit être égale à ERROR, mais alors errno
 * doit être positionné à ECPTBUSY, et le même appel effectué ultérieurement doit renvoyer OK.
 **/
int test_15()
{
	return 0;	
}
/**
 * Test 16 – Utilisation de ioctl avec de mauvais arguments
 * Description
 * Utilisation de la fonction ioctl avec un second paramètre correspondant à une fonction nonimplémenté.
 * Le descripteur de fichier passé en tant que premier paramètre doit être valide, et
 * correspondre à un périphérique géré par le driver.
 * Resultat attendu
 * L’appel doit échouer (la valeur de retour doit être égale à ERROR), et errno doit être positionné
 * à EARG.
 **/
int test_16()
{
	return 0;	
}
/**
 * Test 17 – Utilisation de ioctl pour associer le même capteur à deux descripteur
 * de fichiers
 * Description
 * On utilise la fonction ioctl deux fois, avec des descripteurs de fichier différents, mais avec le
 * même numéro de capteur.
 * Resultat attendu
 * L’appel doit échouer, et renvoyer ERROR. errno doit alors être positionné à EARG.
 **/
int test_17()
{
	return 0;	
}
/**
 * Test 18 – Utilisation de write
 * Description
 * Appel de write sur un capteur ouvert avec succès.
 * Resultat attendu
 * L’appel doit échouer, et errno doit être positionné à ENOTSUP.
 **/
int test_18()
{
	return 0;	
}
/**
 * Test 19 – Fermeture d’un périphérique non ouvert
 * Description
 * En utilisant remove, on tente de fermer un périphérique qui n’est pas ouvert.
 * Resultat attendu
 * L’appel doit échouer, et errno doit être positionné à ENOTOPENED.
 **/
int test_19()
{
	return 0;	
}

void run_suite()
{
	int count = 0;
	count += test_1();
	count += test_2();
	count += test_3();
	count += test_4();
	count += test_5();
	count += test_6();
	count += test_7();
	count += test_8();
	count += test_9();
	count += test_10();
	count += test_11();
	count += test_12();
	count += test_13();
	count += test_14();
	count += test_15();
	count += test_16();
	count += test_17();
	count += test_18();
	count += test_19();

	printf("%d/19 tests passed.\n", count);
	if(count == 19)
	{
		printf("All tests passed successfully.\n");
	}
}

