/**
 * Auteurs : Paul ADENOT & Etienne BRODU
 * Ce fichier fournit l'implémentation d'un pilote de périphérique VxWorks, capable
 * de fournir un moyen d'interroger des capteurs sur un bus CAN.
 */


#include "driver.h"
#include <string.h>
#include <stdlib.h>
#include <errnoLib.h>
#include <stdio.h>

/**
 * Constantes internes.
 */
/* Nom d'un périphérique. Doit être utilisé avec sprintf pour
 * indiquer son numéro */
#define DEVICE_BASENAME "/dev/capteur%d"

/* Nombre maximal de périphérique installables */
#define DEVICE_MAX_COUNT (15)


/**
 * Globaux
 */
/** driver_id vaut -1 si le driver n'est pas installé.
 * Il est égal au numéro du driver sinon.
 */
static int driver_id = -1;


/***
 * Fonctions du driver : implémentation des appels systèmes.
 ***/

/**
 * 
 * @param desc
 * @param name
 * @param flag
 * @return
 */
static int pe_open(PEDEV* desc, char* name, int flag) 
{
	return ERROR;
}

static int pe_close(PEDEV* desc, char* name)
{
	return ERROR;
}

/**
 * 
 * @param desc
 * @param buff
 * @param nBytes
 * @return
 */
static int pe_read (PEDEV* desc, char* buff, int nBytes) 
{
	return ERROR;
}

/**
 * 
 * @param desc
 * @param buff
 * @param nBytes
 * @return
 */
static int pe_write (PEDEV* desc, char* buff, int nBytes) 
{
	return ERROR;
}

/**
 * 
 * @param desc
 * @param request
 * @param value
 * @return
 */
static int pe_ioctl (PEDEV* desc, int request, int value) 
{
	return ERROR;
}

/***
 * Fonction d'administration du driver : interface
 ***/
/**
 * Installation du périphérique.
 * Cette fonction crée aussi un nombre parametrable de périphériques.
 * 
 * @return OK si la fonction s'est executé normalement, ERROR sinon.
 */
int pe_driverInstall(int dev_count)
{
	/* iteration pour la création des périphériques */
	int i;
	char dev_name[32];
	
	
	if(dev_count > DEVICE_MAX_COUNT)
	{
		errnoSet(ETOOMUCHDEV);
		return ERROR;
	}
	
	if(driver_id != -1)
	{
		printf("already installed.");
		errnoSet(EINSTALLED);
		return ERROR;
	}
	
	/* Driver installation */
	driver_id = iosDrvInstall(pe_open,pe_close, pe_open, pe_close, pe_read, 0, pe_ioctl);
	if(driver_id < 0)
	{
		errnoSet(EUNKNOW);
		return ERROR;
	}
	
	
	
//	for(i=0; i < dev_count; ++i)
//	{
//		sprintf(dev_name, DEVICE_BASENAME, i);
//		// TODO Créer les périphs
//	}
	return driver_id;
}

/**
 * 
 * @return 
 */
int pe_driverUninstall()
{
	if(driver_id != -1)
	{
		int ret = 0;
		ret = iosDrvRemove(driver_id, FALSE);
		// The driver has open files.
		if(ret == ERROR)
		{
			errnoSet(ECPTBUSY);
			return ERROR;
		}
	}
	else
	{
		errnoSet(ENINSTALLED);
		return ERROR;
	}
	// TODO : delete the data structure eventually allocated
	// at the installation.
	driver_id = -1;
	return OK;
}
